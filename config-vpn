#!/usr/bin/env bash

# Define help message
help=$(cat <<HELPMSG

Usage: config-vpn ( <connect> | <disconnect> )

    example: config-vpn connect
             config-vpn disconnect
HELPMSG
)

# Set input as readonly to prevent value from changing
readonly task=$1

# Set colors for terminal output
red=$(tput setaf 1)
yellow=$(tput setaf 3)
green=$(tput setaf 2)
normal=$(tput sgr0)

# Function to check if ipv6 is disabled via sysctl
ipv6_check() {
    # Uses nmcli to look for wifi interface name
    wifi_interface=$(nmcli --get-values GENERAL.DEVICE,GENERAL.TYPE device show | sed '/^wifi$/!{h;d;};x')
    if sysctl -a 2>/dev/null | grep -q "net.ipv6.conf.${wifi_interface}.disable_ipv6 = 0"; then
        printf "\n%s\n" "${yellow}Disabling IPV6...${normal}"
        sudo systemctl restart systemd-sysctl.service
    else
        printf "\n%s" "${yellow}IPV6 appears to already be disabled:"
        printf "\n%s\n\n" "${yellow}$(sysctl -a 2>/dev/null | grep "net.ipv6.conf.${wifi_interface}.disable_ipv6 = 1")${normal}"
    fi
}

# Function to check if tailscale is active, and if so, to deactivate it
tail_down() {
    local t_status;
     t_status="systemctl status tailscaled.service |  grep -q 'Active: active'"
     if eval "${t_status}"; then
        printf "\n%s\n" "${yellow}Shutting down tailscale...${normal}"
        sudo tailscale down
        sudo systemctl stop tailscaled
    else
        :
    fi
}

# Function to check if tailscale is deactivated, and if so, to activate it
tail_up() {
    local t_status;
     t_status="systemctl status tailscaled.service |  grep -q 'Active: inactive'"
     if eval "${t_status}"; then
        printf "\n%s\n" "${yellow}Starting tailscale...${normal}"
        sudo systemctl start tailscaled
        sudo tailscale up
        systemctl status tailscaled | head -n3 | tr -s '[:space:]' | printf "Tailscale Status => %s\n" "${green}$(grep 'Active: active')${normal}"
    else
        :
    fi
}

# Function to check if any current vpn connections existi
# Will prompt user if there is a vpn active
check_for_connection() {
    connections="nmcli connection show --active | grep -qE 'yale|wireguard'"
    if eval "${connections}"; then
        printf "\n\n%s\n\n" "${yellow}You seem to be connected already...${normal}"
        printf "%0.s*" $(seq 1 "$(nmcli con show --active | head -n1 | wc -m)")
        printf "\n%s\n" "$(nmcli con show --active | tail -n+2)"
        printf "%0.s*" $(seq 1 "$(nmcli con show --active | head -n1 | wc -m)")
        read -r -p $'\n'$'\n'"Are you sure you want to continue? (y/n)"$'\n' ans
        if [[ "${ans}" = "y" || "${ans}" = "yes" ]]; then
            tail_down
            if nmcli con show --active | grep -q "yale"; then
                nmcli con down "yale" && kill -9 "$(pidof openconnect)"
            elif nmcli con show --active | grep -q "wireguard"; then
                sudo wg-quick down "$(nmcli con show --active | grep "wireguard" | awk '{print $1}')"
            else
                printf "\n%s\n" "${yellow}nothing to stop...${normal}"
            fi
        else
            echo Doing nothing
            exit 0
        fi
    fi
}

# Main disconnect function
# Executes if user runs config-vpn disconnect
# Attempts to find active vpn connection and terminate it
run_disconnect() {
    printf "%s\n\n" "${yellow}Attemping to disconnect vpn...${normal}"
    if nmcli con show --active | grep -q "wireguard"; then
        printf "Disconnecting from %s\n" "${yellow}$(nmcli con show --active | grep "wireguard" | awk '{print $1}')${normal}"
        sudo wg-quick down "$(nmcli con show --active | grep "wireguard" | awk '{print $1}')"
        tail_up
        printf "\n%s\n" "${green}Disconnect successful${normal}"
        exit 0
    elif nmcli con show --active | grep -q "yale"; then
        printf "\n%s\n" "${yellow}Disconnecting from Cisco/Yale${normal}"
        nmcli con down "yale" && kill -9 "$(pidof openconnect)"
        tail_up
        printf "\n%s\n" "${green}Disconnect successful${normal}"
        exit 0
    else
        printf "%s\n" "${red}Something went wrong in run_disconnect..."
        printf "%s\n" "No VPNs seem to be active${normal}"
        exit 1
    fi
}

# Main connection function for yale vpn's as defined in yale_connections
# Executes if user chooses yale option after running config-vpn connect
connect_yale() {
    local host=$1
    if [[ "${host}" = "yale" ]]; then
        yale_connections=("access.yale.edu" "access.yale.edu/pet_image")
        printf "\n Which Yale server would you like to connect to?\n\n"
        for index in "${!yale_connections[@]}"; do
            printf "%d => %s\n" "${index}" "${yale_connections["${index}"]}"
        done
        read -r ans
        printf "\nConnecting to: %s\n" "${yellow}${yale_connections["${ans}"]}${normal}"
        # Shutdown TailScale to reduce DNS Issues
        tail_down
        # Turn off IPV6 so no leaks occur
        ipv6_check
        # Able to run openconnect without sudo by adding a
        # tun device the user can use via root shell:
        # ip tuntap add <vpnname> mode tun user <username>
        # This allows external browser to properly spawn for SSO authentication
        printf "${yellow}\nChecking if tun device for %s\n${normal}" "${yale_connections["${ans}"]}"
        if ip a | grep -q "yale"; then
            printf "${green}\nTun device for %s appears to already be set\n\n${normal}" "${yale_connections["${ans}"]}"
        else
            printf "\n%s\n" "${green}Tun device not set, attempting to set up now${normal}"
            sudo ip tuntap add yale mode tun user "$USER"
        fi
        openconnect \
        -s "sudo -E /etc/vpnc/vpnc-script" \
        --background \
        --protocol=anyconnect \
        --useragent AnyConnect \
        --external-browser=/usr/bin/xdg-open \
        --interface=yale \
        "${yale_connections["${ans}"]}" &
        wait
        sleep 1
        sudo -- sh -c "resolvectl dns yale 172.18.190.12 172.18.190.20 172.18.190.28; \
        resolvectl domain yale '~.'; \
        resolvectl default-route yale true; \
        resolvectl dnsovertls yale no"
        printf "\n%s\n" "${green}Successfully started yale vpn${normal}"
        exit 0
    else
        echo Something went wrong in run_connect...
        exit 1
    fi
}

# Rerouting function for Yale DNS
# Has two options:
#   route all traffic through vpn
#   route only yale.edu yale.internal domains
yale_dns_reroute() {
    connection="nmcli connection show --active | grep -qE yale"
    if eval "${connection}"; then
        options=("all-domains" "yale-domains")
        printf "\nWhich route would you like?\n"
        for index in "${!options[@]}"; do
            printf "%d => %s\n" "${index}" "${options["${index}"]}"
        done
        read -r ans
        if [[ "${options["${ans}"]}" == "all-domains" ]]; then
            sudo -- sh -c "resolvectl dns yale 172.18.190.12 172.18.190.20 172.18.190.28; \
            resolvectl domain yale '~.'; \
            resolvectl default-route yale true; \
            resolvectl dnsovertls yale no"
        elif [[ "${options["${ans}"]}" == "yale-domains" ]]; then
            sudo -- sh -c "resolvectl dns yale 172.18.190.12 172.18.190.20 172.18.190.28; \
            resolvectl domain yale '~yale.edu' '~yale.internal'; \
            resolvectl default-route yale true; \
            resolvectl dnsovertls yale no"
        fi
    fi
}

# Main connection function for Wireguard vpn's as defined in wg_connections
# Executes if user chooses wireguard option after running config-vpn connect
connect_wg() {
    local host=$1
    if [[ "${host}" = "wireguard" ]]; then
        readarray -t wg_connections < "/home/${USER}/.wg-servers"
        printf "\nWhich Wireguard server would you like to connect to?\n\n"
        for index in "${!wg_connections[@]}"; do
            printf "%d => %s\n" "${index}" "${wg_connections["${index}"]}"
        done
        read -r ans
        printf "Connecting to: %s\n\n" "${yellow}${wg_connections["${ans}"]}${normal}"
        # Shutdown TailScale to reduce DNS Issues
        tail_down
        # Turn off IPV6 so no leaks occur
        ipv6_check
        sudo wg-quick up "${wg_connections["${ans}"]}" &
        wait
        sleep 1
        sudo -- sh -c "resolvectl domain ${wg_connections["${ans}"]} '~.'; \
        resolvectl default-route ${wg_connections["${ans}"]} true; \
        resolvectl dnsovertls ${wg_connections["${ans}"]} no"
        printf "\n%s\n" "${green}Successfully started Wireguard vpn${normal}"
    fi
}

main() {
    if [[ "${task}" == "-h" || "${task}" == "--help" ]]; then
        printf '%s\n\n' "${help}"
        exit 0
    elif [[ "${task}" == "connect" ]]; then
        can_connect=("yale" "wireguard")
        printf "%s\n" "${yellow}initiating connection check...${normal}"
        if check_for_connection; then
            printf "\nWhich would you like to connect to?\n\n"
            for index in "${!can_connect[@]}"; do
                printf "%d => %s\n" "${index}" "${can_connect["${index}"]}"
            done
            read -r ans
            if [[ "${can_connect["${ans}"]}" == "yale" ]]; then
                connect_yale "yale"
            elif [[ "${can_connect["${ans}"]}" == "wireguard" ]]; then
                connect_wg "wireguard"
            else
                echo "Error running can_connect function"
                exit 1
            fi
        else
             echo Something went wrong...
             exit 1
        fi
    elif [[ "${task}" == "disconnect" ]]; then
        run_disconnect
    elif [[ "${task}" == "reroute" ]]; then
        yale_dns_reroute
    else
    	printf "\n%s\n" "${red}You entered something wrong${normal}"
        printf "%s\n\n" "${yellow}${help}${normal}"
        exit 1
    fi
}

main
